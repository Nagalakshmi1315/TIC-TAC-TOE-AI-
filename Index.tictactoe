# Constants
HUMAN = 'X'
AI = 'O'
EMPTY = ' '

# Create the board
board = [[EMPTY for _ in range(3)] for _ in range(3)]

def print_board(board):
    for row in board:
        print(' | '.join(row))
        print('-' * 9)

def is_winner(b, player):
    return (
        any(all(b[i][j] == player for j in range(3)) for i in range(3)) or  # Rows
        any(all(b[i][j] == player for i in range(3)) for j in range(3)) or  # Columns
        all(b[i][i] == player for i in range(3)) or                         # Diagonal
        all(b[i][2 - i] == player for i in range(3))                        # Anti-diagonal
    )

def is_draw(b):
    return all(b[i][j] != EMPTY for i in range(3) for j in range(3))

def get_available_moves(b):
    return [(i, j) for i in range(3) for j in range(3) if b[i][j] == EMPTY]

def minimax(b, depth, alpha, beta, is_maximizing):
    if is_winner(b, AI):
        return 10 - depth
    if is_winner(b, HUMAN):
        return depth - 10
    if is_draw(b):
        return 0

    if is_maximizing:
        best = -9999
        for i, j in get_available_moves(b):
            b[i][j] = AI
            val = minimax(b, depth + 1, alpha, beta, False)
            b[i][j] = EMPTY
            best = max(best, val)
            alpha = max(alpha, best)
            if beta <= alpha:
                break
        return best
    else:
        best = 9999
        for i, j in get_available_moves(b):
            b[i][j] = HUMAN
            val = minimax(b, depth + 1, alpha, beta, True)
            b[i][j] = EMPTY
            best = min(best, val)
            beta = min(beta, best)
            if beta <= alpha:
                break
        return best

def best_move(b):
    best_val = -9999
    move = None
    for i, j in get_available_moves(b):
        b[i][j] = AI
        move_val = minimax(b, 0, -10000, 10000, False)
        b[i][j] = EMPTY
        if move_val > best_val:
            best_val = move_val
            move = (i, j)
    return move

def play_game():
    print("Welcome to Tic-Tac-Toe! You are 'X'. AI is 'O'.")
    print_board(board)

    while True:
        # Human turn
        try:
            user_input = input("Enter your move (row and column from 0 to 2): ")
            row, col = map(int, user_input.strip().split())
        except:
            print("Invalid input. Enter row and column numbers separated by space.")
            continue

        if row not in range(3) or col not in range(3) or board[row][col] != EMPTY:
            print("Invalid move. Try again.")
            continue

        board[row][col] = HUMAN
        print_board(board)

        if is_winner(board, HUMAN):
            print("You win!")
            break
        if is_draw(board):
            print("It's a draw!")
            break

        # AI turn
        print("AI is thinking...")
        move = best_move(board)
        board[move[0]][move[1]] = AI
        print_board(board)

        if is_winner(board, AI):
            print("AI wins!")
            break
        if is_draw(board):
            print("It's a draw!")
            break

if __name__ == "__main__":
    play_game()
